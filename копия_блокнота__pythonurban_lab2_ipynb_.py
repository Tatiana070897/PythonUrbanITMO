# -*- coding: utf-8 -*-
"""Копия блокнота "PythonUrban_lab2.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xpcB8ZMNVwzhGkFIhX8PfTyLvn4VCYJC

# Итоговый проект. Улицы. Объекты культурного наследия.
"""

# TODO собрать установку всех необходимых модулей в одном месте
!pip install osmnx  # устанавливаем модуль osmnx
!pip install geopandas 
!pip install mapclassify  # необходимо для визуализации
!pip install jupyter_contrib_nbextensions
!pip install jupyterlab
!pip install keplergl
!jupyter labextension install @jupyter-widgets/jupyterlab-manager keplergl-jupyter
!jupyter nbextension install --py --sys-prefix keplergl
!jupyter nbextension enable --py --sys-prefix keplergl

# TODO собрать импорты всех модулей в одном месте
import osmnx as ox
import geopandas as gpd
from google.colab import output
from keplergl import KeplerGl
import pandas as pd

TILES = "CartoDB positron"  # Название подложки для карт

# TODO указать любой район Санкт-Петербург из OSM https://wiki.openstreetmap.org/wiki/RU:%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3/%D0%A0%D0%B0%D0%B9%D0%BE%D0%BD%D1%8B
TERRITORY_NAME = "R1114905"  # название территории для которой будут строиться слои

# TODO указать ссылку на файл из вашего github репозитория, которая начинается с https://raw.githubusercontent.com/
KGIOP_FILE_URL = "https://raw.githubusercontent.com/Tatiana070897/PythonUrbanITMO/main/geojson%20%D1%81%D0%BB%D0%BE%D0%B8/kgiop_objects.geojson"  # ссылка на слой с объектами культурного наследия
STREETS_FILE_URL = "https://raw.githubusercontent.com/Tatiana070897/PythonUrbanITMO/main/geojson%20%D1%81%D0%BB%D0%BE%D0%B8/streets.geojson"  # ссылка на слой с улицами

"""## Территория

### Загрузка территории из OSM (Extract)
"""

# TODO загрузить geodataframe с геометрией для территории TERRITORY_NAME
district = ox.geocode_to_gdf([TERRITORY_NAME], by_osmid=True)
district

"""## Улицы

### Загрузка файла с улицами (Extract)
"""

# TODO отфильтровать улицы по маске геометрии территории полученной ранее
gdf = gpd.read_file(STREETS_FILE_URL, mask=district)
gdf.rename(columns={"name": "Имя"}, inplace=True)
gdf

gdf.explore(tiles=TILES) #проверка корректности

"""### Обработка данных с улицами (Transform)"""

# TODO сгруппировать и объединить геометрии с одинаковыми названиями
gdf["Имя"].is_unique
gdf = gdf.dissolve(by="Имя")
gdf

"""### Сохранение слоя с улицами (Load)"""

# TODO переименовать столбцы в русские названия, кроме столбца geometry

# TODO для того чтобы переименовать индекс, нужно обратиться и нему и вызвать от него метод rename (https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Index.rename.html)

# TODO сохранить слой в географической проекции в формате GeoJSON
gdf.to_crs(4326).to_file('ptrgdistrict.geojson', driver='GeoJSON')

"""## Объекты культурного наследия

### Загрузка объектов культурного наследия (Extract)
"""

# TODO отфильтровать улицы по маске геометрии территории полученной ранее
gdf1 = gpd.read_file(KGIOP_FILE_URL, mask=district)

gdf1

"""### Обработка объектов культурного наследия (Transform)"""

# TODO добавить два столбца lon и lat, в которых будут долгота и широта 
gdf1["lon"] = gdf1.to_crs(3857).geometry.centroid.to_crs(4326).x
gdf1["lat"] = gdf1.to_crs(3857).geometry.centroid.to_crs(4326).y
gdf1

"""### Сохранение слоя с объектами культурного наследия (Load)"""

# TODO переименовать столбцы в русские названия, кроме столбца geometry
rename_columns = {
    "id": "Номер",
    "ensemble_name": "Основная достопримечательность",
    "object_name": "Имя объекта",
    "occurrence_time": "Дата создания",
    "object_location": "Местонахождение",
    "historical_category": "Категория",
    "normative_act": "Нормативный акт",
    "object_type": "Тип объекта",
    "lon": "Долгота",
    "lat": "Широта"
}
gdf1.rename(columns=rename_columns, inplace=True)
gdf1

# TODO сохранить слой в географической проекции в формате GeoJSON
gdf1.to_crs(4326).to_file('kgiopdistrict.geojson', driver='GeoJSON')

gdf1.explore(tiles=TILES) #проверка корректности